from dotenv import load_dotenv
import os

from langchain.chains.retrieval_qa.base import RetrievalQA
from langchain_community.embeddings.openai import OpenAIEmbeddings
from langchain_community.llms.openai import OpenAI
from langchain_community.vectorstores import MongoDBAtlasVectorSearch
from pymongo import MongoClient
import gradio as gr
from gradio.themes.base import Base


load_dotenv()

# Setup MongoDB connection
mongo_uri = os.getenv('MONGO_URI')
client = MongoClient(mongo_uri)
collection = client["langchain_demo"]["collection_of_text_blobs"]

# Define embedding model
embeddings = OpenAIEmbeddings()

# Init Vector Store
vectorStore = MongoDBAtlasVectorSearch(collection, embeddings)

def query_data(query):
    # Load relevant documents from the MongoDB
    docs = vectorStore.similarity_search(query, K=1)
    as_output = docs[0].page_content

    # Define LLM, default is GPT-3.5-turbo
    llm = OpenAI(temperature=0)

    # Get VectorStore retriever
    retriever = vectorStore.as_retriever()

    # Load "stuff" documents chain. Stuff documents chain takes a list of documents
    # inserts them all into a prompt and passes the prompt to an LLM
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)

    # Execute the chain
    retriever_output = qa.run(query)

    return as_output, retriever_output

# Create a web interface for the app using Gradio
with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """)
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:")

    # Call query_data function upon clicking the Submit button
    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()